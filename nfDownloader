#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { program } = require('commander');

const getPdfKeys = require('./src/controllers/getPdfKeys')
const genImageKeysHtml = require('./src/controllers/genImageKeysHtml')
const processKeyData = require('./src/controllers/processKeyData')
const {paralalelDonwloadNfList, paralalelDonwloadDocList, paralalelDonwloadDocChildren} = require('./src/controllers/nfDonwloader')
const {getNfDataFromDocFiles, getNfDataFromDocIds, getChildrenNfDataFromDocIds} = require('./src/controllers/nfProcessor')
const {reportFromDocs, noChildReport} = require('./src/controllers/reportGenerator')
const json2Db = require('./src/controllers/json2Db')
const downloadDocFiles = require('./src/controllers/downloadDocFiles')

program
  .command('donwload-doc-files')
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    downloadDocFiles(docIdsList).then(res => console.log(res))
  })

program
  .command('find-keys')
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    getPdfKeys(docIdsList).then(res => console.log(res))
  })

program
  .command('gen-key-html')
  .option('-o, --output <outputFile>','Output file', null)
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }

    if (!cmd.output){
      let basename = path.basename(cmd.args[0]);
      cmd.output = path.join('./files/keyImagesHtmls',basename.replace(/\.[^/.]+$/, "") + '.html')
    }
    genImageKeysHtml(docIdsList, cmd.output).then(res => console.log(res))

  })

program
  .command('process-key-data')
  .action( (cmd) =>{
    let keysInfo = {}
    for (const inputFile of cmd.args){
      keysInfo = {... keysInfo, ... JSON.parse(fs.readFileSync(inputFile)) }
    }
    processKeyData(keysInfo).then(res => console.log(res))
  })

  program
  .command('donwload-nf-list')
  .option('-r, --rewrite', 'Rewrite existing files?', false)
  .option('-p, --parallel-browsers <njobs>', 'Number of parallel browser to run',1)
  .action( (cmd) =>{
    let nfList = []
    for (const inputFile of cmd.args){
      nfList = nfList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    paralalelDonwloadNfList(nfList, cmd.parallelBrowsers, cmd.rewrite).then(res => console.log(res))
  })

program
  .command('donwload-doc-list')
  .option('-r, --rewrite', 'Rewrite existing files?', false)
  .option('-p, --parallel-browsers <njobs>', 'Number of parallel browser to run',1)
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    paralalelDonwloadDocList(docIdsList, cmd.parallelBrowsers, cmd.rewrite).then(res => console.log(res))
  })

program
  .command('donwload-doc-children')
  .option('-r, --rewrite', 'Rewrite existing files?', false)
  .option('-p, --parallel-browsers <njobs>', 'Number of parallel browser to run',1)
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    paralalelDonwloadDocChildren(docIdsList, cmd.parallelBrowsers, cmd.rewrite).then(res => console.log(res))
  })


program
  .command('process-docs')
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    getNfDataFromDocFiles(docIdsList).then(res => console.log(res))
  })

program
  .command('process-nfs')
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    getNfDataFromDocIds(docIdsList).then(res => console.log(res))
  })

program
  .command('process-nfs-children')
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    getChildrenNfDataFromDocIds(docIdsList).then(res => console.log(res))
  })

program
  .command('generate-report')
  .action( (cmd) =>{
    let docIdsList = []
    for (const inputFile of cmd.args){
      docIdsList = docIdsList.concat(JSON.parse(fs.readFileSync(inputFile)))
    }
    reportFromDocs(docIdsList).then(res => console.log(res))
  })

program
  .command('no-child-report')
  .action( (cmd) =>{
    noChildReport().then(res => console.log(res))
  })

program
  .command('json-to-db')
  .action( (cmd) =>{
    for (const inputFile of cmd.args){
      json2Db(inputFile).then(res => console.log(res))
    }
  })

program.parse()